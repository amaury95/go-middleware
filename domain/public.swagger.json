{
  "swagger": "2.0",
  "info": {
    "title": "go Middleware API",
    "description": "API Services",
    "version": "1.0",
    "contact": {
      "name": "Amaury Diaz",
      "url": "https://github.com/amaury95",
      "email": "amauryuh@gmail.com"
    }
  },
  "tags": [
    {
      "name": "TransactionService"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/transaction/ping": {
      "get": {
        "operationId": "TransactionService_Ping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BoolResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "TransactionService"
        ]
      }
    },
    "/v1/transaction/submit": {
      "post": {
        "operationId": "TransactionService_Submit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubmitResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SubmitRequest"
            }
          }
        ],
        "tags": [
          "TransactionService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1BoolResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "v1ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1SubmitRequest": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string"
        },
        "contract": {
          "type": "string"
        },
        "transaction": {
          "$ref": "#/definitions/v1Transaction"
        }
      }
    },
    "v1SubmitResponse": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "rejectReason": {
          "type": "string"
        }
      }
    },
    "v1Transaction": {
      "type": "object",
      "description": "..."
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
